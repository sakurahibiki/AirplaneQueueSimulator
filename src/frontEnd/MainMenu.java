package frontEnd;

import backEnd.FlightProcessor;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class MainMenu extends javax.swing.JFrame {
    
    public  FlightProcessor fp;

    /**
     * Creates new form MainMenu
     */
    public MainMenu() {
        initComponents();
        fp = new FlightProcessor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        ViewAllMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        simulationMenuItem = new javax.swing.JMenuItem();
        optionMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        ViewAllMenuItem.setMnemonic('a');
        ViewAllMenuItem.setText("View All");
        ViewAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewAllMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(ViewAllMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Run");

        simulationMenuItem.setMnemonic('p');
        simulationMenuItem.setText("Simulation");
        simulationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulationMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(simulationMenuItem);

        optionMenuItem.setMnemonic('d');
        optionMenuItem.setText("Option");
        optionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(optionMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        
        int option = JOptionPane.showConfirmDialog(null, "Exit program?","EXIT", JOptionPane.YES_NO_OPTION);
        
        if(option ==JOptionPane.YES_OPTION)
        {
            System.exit(0);   
        }
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        
        JFileChooser dlg = new JFileChooser();
        int option = dlg.showOpenDialog(this);
        
        if (option == JFileChooser.APPROVE_OPTION) {
            String filename = dlg.getSelectedFile().getAbsolutePath();
            
            boolean success = fp.load(filename);
            
            if (success) {
                JOptionPane.showMessageDialog(this, "Flights were loaded successfully.");
            }
            else {
                JOptionPane.showMessageDialog(this, "Unable to load flights.");
            }
        }
        
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
        JFileChooser dlg = new JFileChooser();
        int option = dlg.showSaveDialog(this);
        
        if(option == JFileChooser.APPROVE_OPTION){
            String filename = dlg.getSelectedFile().getAbsolutePath();
            
            boolean success = fp.store(filename);
            
            if (success) {
            JOptionPane.showMessageDialog(this, "Flights were stored successfully.");
            }
            else {
                JOptionPane.showMessageDialog(this, "Unable to backup flights.");
            }

        }
        
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void ViewAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewAllMenuItemActionPerformed
        // TODO add your handling code here:
        ViewAllDialog dlg = new ViewAllDialog(this, true);
        dlg.setVisible(true);
    }//GEN-LAST:event_ViewAllMenuItemActionPerformed

    private void simulationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simulationMenuItemActionPerformed
        // TODO add your handling code here:
        RunSimulationDialog dlg = new RunSimulationDialog(this,true);
        dlg.setVisible(true);
    }//GEN-LAST:event_simulationMenuItemActionPerformed

    private void optionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionMenuItemActionPerformed
        // TODO add your handling code here:
        String currentValue = Integer.toString(fp.getTerminalcount());
        
        try{
            String newValue = JOptionPane.showInputDialog(this,"Enter number of terminals:", currentValue);
            if (newValue == null) return; // user clicked the Cacel button.
            
            fp.setTerminalCount(Integer.parseInt(newValue));
            JOptionPane.showMessageDialog(this, "Successfully updated number of terminals. \n Terminal count is " + newValue);
            
        }
        catch(Exception ex) {
            System.err.println(ex);
            
            fp.setTerminalCount(Integer.parseInt(currentValue));
            JOptionPane.showMessageDialog(this,"Couldn't update number of terminals. \n Terminal count is" +currentValue,
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_optionMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        StringBuilder teamDeteails = new StringBuilder();
        teamDeteails.append("Developer: Adjatay Thach\n");
        JOptionPane.showMessageDialog(this, teamDeteails.toString());
        
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ViewAllMenuItem;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem optionMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem simulationMenuItem;
    // End of variables declaration//GEN-END:variables

}
